using System;
using System.Collections;

namespace Person {
    internal class Program {
        private static void Main(string[] args) {

            PersonClass[] PeopleArr = new PersonClass[] {
                new PersonClass (Demographic.Youth, 19, "Mikkel", RiskGroup.Low),
                new PersonClass (Demographic.Youth, 27, "Mathilde", RiskGroup.Low),
                new PersonClass (Demographic.Youth, 22, "Magnus", RiskGroup.Low),
                new PersonClass (Demographic.Adult, 47, "Kathrin", RiskGroup.Medium),
                new PersonClass (Demographic.Adult, 53, "Kim", RiskGroup.Medium),
                new PersonClass (Demographic.Child, 15, "Julie", RiskGroup.Low),
                new PersonClass (Demographic.Adult, 52, "Charlotte", RiskGroup.High),
                new PersonClass (Demographic.Youth, 19, "lilV", RiskGroup.Low),
                new PersonClass (Demographic.Youth, 20, "Lucas", RiskGroup.Low),
                new PersonClass (Demographic.Senior, 60, "olGang", RiskGroup.High),
            };

            foreach (PersonClass per in PeopleArr) {
                Console.WriteLine(per);
            }

            Array.Sort(PeopleArr, 0, 9, CompareTo);

            Console.WriteLine("\n");

            foreach (PersonClass per in PeopleArr) {
                Console.WriteLine(per);
            }
        }
    }
}


        public static int Binary(IComparable[] array, IComparable target) {
            if (array.Length > 0) {
                var low = 0;
                var high = array.Length - 1;
                //checks the last and first element to see if target can be inbetween
                if (array[0].CompareTo(target) <= 0 && array[high].CompareTo(target) >= 0) {
                    while (low <= high) { //only less than now
                        var mid = low + (high - low)/2; //(high + low) / 2 - can also be low/2 + high/2
                        var midVal = array[mid]; //redundant, midVal can be replaced by array[mid] in relation
                        var relation = midVal.CompareTo(target);

                        if (relation < 0) {
                            low = mid + 1;
                        } else if (relation > 0) {
                            high = mid - 1;
                        } else {
                            while (!mid.Equals(0)) { //array[mid - 1].Equals(array[mid])
                                if (array[mid - 1].Equals(array[mid]) ) {
                                mid -= 1;
                                }
                                else {
                                    break;
                                }
                            }
                            return mid;
                        }
                    }
                }
                return -1;
            }
            return -1;
        }