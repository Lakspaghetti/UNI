// Generated test data for LinAlgDat Project A
// Seed: 111
// Date of creation: 29/03/2021

module testData
open ProjectA
open TestProjectA
open LinAlgDat.Core

let details = true
let summary = true

let mutable resultsList = []
// data for 'augmentRight()'

let mutable argList = []

// random dimensions (m = 7, n = 4)
let argA1 = array2D [[-0.6318044488; 0.211961784; -1.568344236; -0.4735227091];
                  [1.015027255; -0.407482868; 1.270788914; -0.9731635749];
                  [0.8145826377; 0.4549443987; -0.9226473635; 0.0141987585];
                  [-0.577360743; -0.6572434314; -1.40676243; 1.003310287];
                  [0.1856304428; 0.6279644903; 0.4264082588; 1.415977589];
                  [-1.792460948; 0.2194717332; 2.277814136; -0.7640398975];
                  [1.016847958; 0.6490128502; 0.81885607; 0.233860253]] |> Matrix
let argv1 = [|0.3843737384; 1.756674015; -1.033620679; 2.519778176; -1.646145059; 0.9850266285; 0.1887825414|] |> Vector
let argAv1 = array2D [[-0.6318044488; 0.211961784; -1.568344236; -0.4735227091; 0.3843737384];
                  [1.015027255; -0.407482868; 1.270788914; -0.9731635749; 1.756674015];
                  [0.8145826377; 0.4549443987; -0.9226473635; 0.0141987585; -1.033620679];
                  [-0.577360743; -0.6572434314; -1.40676243; 1.003310287; 2.519778176];
                  [0.1856304428; 0.6279644903; 0.4264082588; 1.415977589; -1.646145059];
                  [-1.792460948; 0.2194717332; 2.277814136; -0.7640398975; 0.9850266285];
                  [1.016847958; 0.6490128502; 0.81885607; 0.233860253; 0.1887825414]] |> Matrix
let arg1 = TestMatrixAugmentation argA1 argv1 argAv1
argList <- argList @ [arg1]

// random dimensions (m = 4, n = 3)
let argA2 = array2D [[0.2447739481; 0.03762801281; -0.7212209827];
                  [-2.187912625; -0.6239859588; 0.0222662673];
                  [0.7868701762; 1.126800779; 0.4912946098];
                  [0.1103317772; -1.105341656; -1.093792964]] |> Matrix
let argv2 = [|-0.5534194099; 2.7203197; 0.4161880161; -0.8829046407|] |> Vector
let argAv2 = array2D [[0.2447739481; 0.03762801281; -0.7212209827; -0.5534194099];
                  [-2.187912625; -0.6239859588; 0.0222662673; 2.7203197];
                  [0.7868701762; 1.126800779; 0.4912946098; 0.4161880161];
                  [0.1103317772; -1.105341656; -1.093792964; -0.8829046407]] |> Matrix
let arg2 = TestMatrixAugmentation argA2 argv2 argAv2
argList <- argList @ [arg2]

// random dimensions (m = 3, n = 6)
let argA3 = array2D [[-0.126772013; 0.1897230312; 0.04347740431; -1.83102306; 3.210163536; -2.62783821];
                  [-1.135149664; -0.8080449124; -0.3841471551; 1.537455086; 0.5206696163; 0.1606415046];
                  [-0.559243263; -1.031820717; -0.06125989942; 0.852785526; -1.257432559; -1.58106068]] |> Matrix
let argv3 = [|0.1212805372; 0.3541851062; -1.383583256|] |> Vector
let argAv3 = array2D [[-0.126772013; 0.1897230312; 0.04347740431; -1.83102306; 3.210163536; -2.62783821; 0.1212805372];
                  [-1.135149664; -0.8080449124; -0.3841471551; 1.537455086; 0.5206696163; 0.1606415046; 0.3541851062];
                  [-0.559243263; -1.031820717; -0.06125989942; 0.852785526; -1.257432559; -1.58106068; -1.383583256]] |> Matrix
let arg3 = TestMatrixAugmentation argA3 argv3 argAv3
argList <- argList @ [arg3]

resultsList <- resultsList @ [argList]

// data for 'matrixVectorProduct()'

let mutable mvpList = []

// random dimensions (m = 6, n = 2)
let mvpA1 = array2D [[1.423701074; -0.4572025611];
                  [-0.3691914202; 2.00069279];
                  [1.596806973; -0.4026667553];
                  [0.5128599595; 0.9042050447];
                  [0.5080038186; -0.05699140748];
                  [0.6859553371; -0.01677535135]] |> Matrix
let mvpv1 = [|-2.123629574; -2.893745223|] |> Vector
let mvpAv1 = [|-1.700385979; -5.005469385; -2.225811512; -3.705663606; -0.9138933198; -1.408171448|] |> Vector
let mvp1 = TestMatrixVectorProduct mvpA1 mvpv1 mvpAv1
mvpList <- mvpList @ [mvp1]

// random dimensions (m = 7, n = 2)
let mvpA2 = array2D [[0.7363785615; -0.3026035625];
                  [1.507991052; 1.82933584];
                  [0.01408028024; 1.40046319];
                  [-0.05925196356; -0.1253676053];
                  [0.3911121855; -0.6967717789];
                  [1.129249667; -0.3612016201];
                  [-0.939387321; 1.123356869]] |> Matrix
let mvpv2 = [|0.3738221253; -0.0578231468|] |> Vector
let mvpAv2 = [|0.2927720891; 0.4579424653; -0.07571566836; -0.0149005455; 0.1864959252; 0.4430243248; -0.4161197939|] |> Vector
let mvp2 = TestMatrixVectorProduct mvpA2 mvpv2 mvpAv2
mvpList <- mvpList @ [mvp2]

// random dimensions (m = 1, n = 2)
let mvpA3 = array2D [[1.286779074; 0.6953473964]] |> Matrix
let mvpv3 = [|0.1590238442; 0.1204287423|] |> Vector
let mvpAv3 = [|0.2883683674|] |> Vector
let mvp3 = TestMatrixVectorProduct mvpA3 mvpv3 mvpAv3
mvpList <- mvpList @ [mvp3]

resultsList <- resultsList @ [mvpList]

// data for 'matrixMatrixProduct()'

let mutable mmpList = []

// random dimensions (m = 9, n = 2)
let mmpA1 = array2D [[1.440171123; 0.6865679494];
                  [1.202317746; 1.196917843];
                  [-1.391822498; 2.150609747];
                  [-0.9982902927; 0.2306735719];
                  [0.1819090206; -0.4644238549];
                  [0.2208715465; -0.08148058149];
                  [-0.6096167957; 0.5759569827];
                  [-0.7249126153; 0.2541276969];
                  [-0.4006521928; 0.08278056569]] |> Matrix
let mmpB1 = array2D [[-1.068419542; 0.7501555937; -3.08034991; -0.162585229; 1.176407248; -1.681905; 0.4514837354];
                  [0.4973660752; -0.08401285063; -2.528922543; -0.09743392024; -0.5430274439; 0.09457225039; 1.368395818]] |> Matrix
let mmpAB1 = array2D [[-1.197231365; 1.022671893; -6.172508152; -0.3010455586; 1.321402509; -2.357300736; 1.589710549];
                  [-0.6892734454; 0.8013689027; -6.730471877; -0.3120995038; 0.7644560741; -1.908989015; 2.180684278];
                  [2.556690685; -1.224762288; -1.151425165; 0.01674744105; -2.805190189; 2.544301223; 2.314500164];
                  [1.181322066; -0.7682525916; 2.491727817; 0.1398318255; -1.299658016; 1.700844754; -0.1350590793];
                  [-0.4253438225; 0.1754776413; 0.6141485211; 0.01567491706; 0.4661939892; -0.3498753005; -0.5533866968];
                  [-0.2765091536; 0.172533442; -0.4743035691; -0.0279714785; 0.3040810802; -0.3791907604; -0.01177777609];
                  [0.9377879615; -0.5056952373; 0.4212824442; 0.04299693963; -1.029918065; 1.079787085; 0.5129050584];
                  [0.9009052995; -0.5651472456; 1.590315248; 0.09309942583; -0.9907907686; 1.24326758; 0.02046102224];
                  [0.4692368773; -0.3075061149; 1.024803307; 0.05707449349; -0.5162822626; 0.6816876707; -0.06761136868]] |> Matrix
let mmp1 = TestMatrixMatrixProduct mmpA1 mmpB1 mmpAB1
mmpList <- mmpList @ [mmp1]

// random dimensions (m = 4, n = 5)
let mmpA2 = array2D [[-0.3183284611; -0.2168276278; -0.2383186462; 1.834610757; -0.5337385572];
                  [-1.145028768; -0.248854106; -0.4013698328; -0.4283495507; -0.8829502107];
                  [0.3218256254; 1.196859538; -0.2416953313; -0.1788572897; -0.6206092285];
                  [-0.4027402193; -0.05092130068; -0.1743182363; 0.09106953242; 0.7321322069]] |> Matrix
let mmpB2 = array2D [[1.20026935; 0.190135533; 0.03410675211; 0.1095729134; 0.571550617; -0.3306565215; -1.402983178; -0.8170043677];
                  [-0.04956615634; -1.58949091; -0.6338709769; -0.8434713637; -0.1260220614; 0.8847369776; 0.6701313415; 0.8675660226];
                  [-0.5666202347; -0.5513319982; -0.4314162899; -0.5415773492; 0.02336227568; 0.6807065615; 0.4782238296; -0.6198844714];
                  [-1.233004556; 0.3121799587; -0.1963653425; -0.4651596962; -0.1918270506; 1.264764274; 0.4054173675; -0.7765826132];
                  [-0.5007059245; -0.7421820739; -0.2227304164; -0.741383057; 0.6202824219; -2.797233304; 1.022306398; -0.6395043938]] |> Matrix
let mmpAB2 = array2D [[-2.231133781; 1.384372587; -0.01197602201; -0.1806065606; -0.843180045; 3.564538304; 0.385475553; -0.8637051751];
                  [-0.1643285755; 0.9207163897; 0.5726185413; 1.155665257; -1.097967168; 1.813282248; 0.1714405497; 1.865698417];
                  [0.995177743; -1.303183117; -0.4700568697; -0.3000502886; -0.3231809533; 2.297745043; -0.4720119544; 1.4610247];
                  [-0.8609726098; -0.4144743769; -0.08720591065; -0.4919242416; 0.2088174544; -1.963305946; 1.232935268; -0.1460046829]] |> Matrix
let mmp2 = TestMatrixMatrixProduct mmpA2 mmpB2 mmpAB2
mmpList <- mmpList @ [mmp2]

// random dimensions (m = 7, n = 3)
let mmpA3 = array2D [[1.171163383; 0.5080161913; -0.6214232031];
                  [-0.8248396783; 0.1650244944; -0.08236012784];
                  [2.194155291; -0.4769482998; -0.2979063172];
                  [0.6624129675; 0.1619053899; 0.3974310066];
                  [1.049481443; 0.5540270133; -0.00183172164];
                  [1.22748015; 0.1414999908; 0.056065879];
                  [0.04070085988; -0.6912124649; -0.9783184674]] |> Matrix
let mmpB3 = array2D [[2.281995273; 3.351809745; -1.883203676; 0.4259794738; 0.4237203431; -0.9230488628];
                  [-1.802326198; 0.7876011035; 0.5761692778; 0.08224519499; 0.9654094206; -0.02589180052];
                  [-0.6623815144; 0.5408195501; -0.7755582029; 1.278170761; -0.3462075346; -0.3977473826]] |> Matrix
let mmpAB3 = array2D [[2.168597655; 3.989553135; -1.430886003; -0.253611516; 1.201830762; -0.84702503];
                  [-2.12515439; -2.679274165; 1.71229823; -0.4430626077; -0.1616714531; 0.789853071];
                  [6.063996056; 6.817632517; -4.175800578; 0.5146632662; 0.5723952624; -1.894472038];
                  [0.9565659829; 2.562737561; -1.462404501; 0.8034749597; 0.2993892295; -0.773708701];
                  [1.39758759; 3.953023783; -1.65575336; 0.4902823594; 0.9801836907; -0.9823388467];
                  [2.508937758; 4.256047; -2.273549535; 0.6061808099; 0.6373033046; -1.158987903];
                  [1.986689572; -0.9370719147; 0.2838395168; -1.289969233; -0.3113560183; 0.3694514626]] |> Matrix
let mmp3 = TestMatrixMatrixProduct mmpA3 mmpB3 mmpAB3
mmpList <- mmpList @ [mmp3]

resultsList <- resultsList @ [mmpList]

// data for 'transpose()'

let mutable tspList = []

// random dimensions (m = 1, n = 7)
let tspA1 = array2D [[-0.1230387707; -1.049889532; 0.7959536852; 0.7311015876; -0.4127757582; 0.1576973686; -2.024741165]] |> Matrix
let tspAt1 = array2D [[-0.1230387707];
                  [-1.049889532];
                  [0.7959536852];
                  [0.7311015876];
                  [-0.4127757582];
                  [0.1576973686];
                  [-2.024741165]] |> Matrix
let tsp1 = TestTranspose tspA1 tspAt1
tspList <- tspList @ [tsp1]

// random dimensions (m = 8, n = 6)
let tspA2 = array2D [[-0.3203239079; 0.5393932988; 0.1173907463; 0.4435036091; -1.457529902; -0.5387620301];
                  [0.2973845714; 0.02337603673; -0.1981273235; 1.848613053; -0.6423047553; 0.9755343654];
                  [-0.2618726293; -1.281803968; 1.341791325; -2.528595111; 0.6757027604; 0.5778774896];
                  [-1.207893802; 1.347435067; 1.173259441; -0.3736037933; -0.05633035372; 0.2827690441];
                  [-0.08530930902; -2.162115506; -1.491451442; -0.8038781518; -0.6813054898; 0.0653256907];
                  [-0.7024190811; 0.2147596021; 0.2141443351; -1.605034623; -0.4912416807; -1.736622171];
                  [1.601943244; 0.1884114456; -0.2706161011; 0.9017281703; -1.628298267; 0.5694932935];
                  [-0.02899652935; -0.6024855225; 0.2045385354; -0.2070866978; -1.550936856; -0.6863898727]] |> Matrix
let tspAt2 = array2D [[-0.3203239079; 0.2973845714; -0.2618726293; -1.207893802; -0.08530930902; -0.7024190811; 1.601943244; -0.02899652935];
                  [0.5393932988; 0.02337603673; -1.281803968; 1.347435067; -2.162115506; 0.2147596021; 0.1884114456; -0.6024855225];
                  [0.1173907463; -0.1981273235; 1.341791325; 1.173259441; -1.491451442; 0.2141443351; -0.2706161011; 0.2045385354];
                  [0.4435036091; 1.848613053; -2.528595111; -0.3736037933; -0.8038781518; -1.605034623; 0.9017281703; -0.2070866978];
                  [-1.457529902; -0.6423047553; 0.6757027604; -0.05633035372; -0.6813054898; -0.4912416807; -1.628298267; -1.550936856];
                  [-0.5387620301; 0.9755343654; 0.5778774896; 0.2827690441; 0.0653256907; -1.736622171; 0.5694932935; -0.6863898727]] |> Matrix
let tsp2 = TestTranspose tspA2 tspAt2
tspList <- tspList @ [tsp2]

// random dimensions (m = 9, n = 4)
let tspA3 = array2D [[-0.2594398793; -0.3322767197; 0.8890664935; -1.192331453];
                  [-0.9015406489; -1.244211116; -1.162711666; 0.03190459705];
                  [-0.5705001809; -0.2743648205; -1.647496353; 0.1891842252];
                  [0.8138848099; 1.115293842; -0.9601526805; -0.8856093258];
                  [0.1031487901; 1.475807131; 1.802482318; 0.974392892];
                  [0.03443563831; -1.841765769; -1.141950597; -1.193135468];
                  [-0.4079669634; 0.3995298804; -0.9839080627; -0.1329609856];
                  [0.5878456345; -1.477421066; -0.9930775778; 1.728206132];
                  [-0.7741076179; -0.017042626; -1.176241948; 0.5893412589]] |> Matrix
let tspAt3 = array2D [[-0.2594398793; -0.9015406489; -0.5705001809; 0.8138848099; 0.1031487901; 0.03443563831; -0.4079669634; 0.5878456345; -0.7741076179];
                  [-0.3322767197; -1.244211116; -0.2743648205; 1.115293842; 1.475807131; -1.841765769; 0.3995298804; -1.477421066; -0.017042626];
                  [0.8890664935; -1.162711666; -1.647496353; -0.9601526805; 1.802482318; -1.141950597; -0.9839080627; -0.9930775778; -1.176241948];
                  [-1.192331453; 0.03190459705; 0.1891842252; -0.8856093258; 0.974392892; -1.193135468; -0.1329609856; 1.728206132; 0.5893412589]] |> Matrix
let tsp3 = TestTranspose tspA3 tspAt3
tspList <- tspList @ [tsp3]

resultsList <- resultsList @ [tspList]

// data for 'vectorNorm()'

let mutable vnList = []

// random dimensions (m = 5, n = 3)
let vnv1 = [|0.04679907111; -0.8333788387; 0.2468178001; -0.7347008939; 0.89024259|] |> Vector
let vnnv1 = 1.445665
let vn1 = TestVectorNorm vnv1 vnnv1
vnList <- vnList @ [vn1]

// random dimensions (m = 2, n = 3)
let vnv2 = [|-0.03862043921; -1.053375113|] |> Vector
let vnnv2 = 1.054083
let vn2 = TestVectorNorm vnv2 vnnv2
vnList <- vnList @ [vn2]

// random dimensions (m = 5, n = 3)
let vnv3 = [|-1.341195801; -0.1431984152; 0.6870034215; 0.3383337429; 0.1763916979|] |> Vector
let vnnv3 = 1.561048
let vn3 = TestVectorNorm vnv3 vnnv3
vnList <- vnList @ [vn3]

resultsList <- resultsList @ [vnList]

let printSummaries llst =
    printfn "\nSummary\n=============================="
    let printSummary lst =
        let pass = List.filter (fun (x,y,z) -> y) lst
        match lst.Head with
        | x,y,z -> 
            let s = sprintf "Tests of %s passed/total:" x
            printfn "%-50s [%i/%i]" s (pass.Length) (lst.Length)
    List.map printSummary llst |> ignore
    printfn "------------------------------"

let printDetails llst =
    printfn "\nTest results\n=============================="
    let printDetail (lst : (string * bool * string) list) =
        List.map (fun (x,y,z) -> printf "%s" z) lst
    List.map printDetail llst |> ignore
    printfn ""

if details then printDetails resultsList
if summary then printSummaries resultsList
