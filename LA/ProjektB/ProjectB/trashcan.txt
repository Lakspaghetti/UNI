static member findPivotCol (M : Matrix) : int =
        let tolerance = 0.00000001
        let m_rows = M.M_Rows
        let n_cols = M.N_Cols

        let mutable I = 0
        let mutable IsPivotColFound = false

        while not IsPivotColFound do
            for j in 0..m_rows-1 do
                if M.[j,I] > tolerance || abs(M.[j,I] - 0.0) > tolerance then
                    IsPivotColFound <- true
                else 
                    ()
            I <- I + 1
        I

    static member findPivotElm (M : Matrix) (col : int) : int =
        let tolerance = 0.00000001
        let mutable E = 0
        let mutable IsPivotElmFound = false

        while not IsPivotElmFound do
            if M.[E,col] > tolerance || abs(M.[E,col] - 0.0) > tolerance then
                IsPivotElmFound <- true
            else
                E <- E + 1
        E

    static member OneRowReduction (M : Matrix) : Matrix =
        let mutable result = Matrix (M)
        let tolerance = 0.00000001
        let m_rows = M.M_Rows
        //locate the pivotcolumn
        let pivotColumn = GaussOps.findPivotCol M
        //locate the first nonzero entry in the pivotcolumn
        let pivotRow = GaussOps.findPivotElm M pivotColumn 
        //use pivotColumn and pivotRow to get the pivotelm
        let pivotElm = M.[pivotColumn,pivotRow]
        
        //swap row 1 with the pivotrow
        if pivotRow = 1 then
            ()
        else
            Console.WriteLine("pivotRow: {0}", pivotRow)   
            result <- GaussOps.ElementaryRowInterchange M 0 pivotRow
        //change elements below the pivot element to be 0
        for i in 1..m_rows-1 do
            if result.[i,pivotColumn] > tolerance || result.[i,pivotColumn] < -tolerance then
                let mValue = -(result.[i,pivotColumn])/pivotElm
                result <- GaussOps.ElementaryRowReplacement result i mValue pivotColumn
            else
                ()
        result
    
    static member createSubMatrix (M : Matrix) (i : int) : Matrix =
        let m_rows = M.M_Rows
        let n_cols = M.N_Cols
        let mutable submatrix = Matrix(m_rows-1,n_cols)
        //removes the top row of the matrix M
        for K in i..m_rows-1 do
            for L in 0..n_cols-1 do
                submatrix.[K-i,L] <- M.[K,L]
        submatrix