// Generated test data for LinAlgDat Project B
// Seed: 158
// Date of creation: 04/05/2021

module testData
open ProjectB
open TestProjectB
open LinAlgDat.Core

let details = true
let summary = true

let mutable resultsList = []
// data for 'rowReplacement()'

let mutable rrList = []

// random dimensions (m = 4, n = 3)
let rrA1 = array2D [[-1.332577736; -0.6856333327; -0.4357185527];
                  [-0.9936534146; -1.103676032; 0.9889657976];
                  [-0.04953431151; -0.6203169158; 0.06533731246];
                  [1.131288812; -1.648165899; 0.09491461833]] |> Matrix
let rri1 = 0
let rrf1 = 0.282144223936901
let rrj1 = 1
let rrAv1 = array2D [[-1.612931307; -0.9970291502; -0.1566875652];
                  [-0.9936534146; -1.103676032; 0.9889657976];
                  [-0.04953431151; -0.6203169158; 0.06533731246];
                  [1.131288812; -1.648165899; 0.09491461833]] |> Matrix
let rr1 = TestRowReplacement rrA1 rri1 rrf1 rrj1 rrAv1
rrList <- rrList @ [rr1]

// random dimensions (m = 7, n = 7)
let rrA2 = array2D [[0.9657698727; -0.2030940031; 0.7605305967; 0.6968154436; -1.372107496; 0.2185882993; 1.895247493];
                  [-0.9975447878; 0.1825357613; -0.1536921619; -2.66038225; -0.6880547747; -0.8846709191; 0.2162221082];
                  [0.1011050712; 0.5817703774; -1.367080483; -0.8495373892; -1.156718618; -0.4685315987; 0.4889831614];
                  [-0.07438924249; 1.43542949; 0.6880472722; 1.470977299; -0.2693567003; -1.618109198; 0.3288499025];
                  [0.1287267347; -0.5814893676; -1.203101503; -0.5500824817; -1.410687745; -0.7156619355; 0.1306368364];
                  [0.5257067766; 0.2804809166; -0.1446959865; -0.4002698181; -2.080496115; -0.6264647594; 0.8185731546];
                  [-1.470362037; 0.03079583051; 0.1256698043; -1.734011792; 0.46591939; -0.8793779781; -0.7464868162]] |> Matrix
let rri2 = 4
let rrf2 = 0.52478841856345
let rrj2 = 3
let rrAv2 = array2D [[0.9657698727; -0.2030940031; 0.7605305967; 0.6968154436; -1.372107496; 0.2185882993; 1.895247493];
                  [-0.9975447878; 0.1825357613; -0.1536921619; -2.66038225; -0.6880547747; -0.8846709191; 0.2162221082];
                  [0.1011050712; 0.5817703774; -1.367080483; -0.8495373892; -1.156718618; -0.4685315987; 0.4889831614];
                  [-0.07438924249; 1.43542949; 0.6880472722; 1.470977299; -0.2693567003; -1.618109198; 0.3288499025];
                  [0.08968812177; 0.1718074045; -0.8420222632; 0.2218693688; -1.552043022; -1.564826903; 0.3032134567];
                  [0.5257067766; 0.2804809166; -0.1446959865; -0.4002698181; -2.080496115; -0.6264647594; 0.8185731546];
                  [-1.470362037; 0.03079583051; 0.1256698043; -1.734011792; 0.46591939; -0.8793779781; -0.7464868162]] |> Matrix
let rr2 = TestRowReplacement rrA2 rri2 rrf2 rrj2 rrAv2
rrList <- rrList @ [rr2]

// random dimensions (m = 7, n = 8)
let rrA3 = array2D [[-0.2320226957; -1.398676045; 0.09564358431; 1.837292738; 0.6849630728; 0.5831990152; -1.297230139; 1.226614878];
                  [2.247737335; 0.1072831987; 1.037616243; 1.927516408; -0.914551723; 0.7078765186; -0.1936278432; 0.7419281331];
                  [1.107249296; 0.0002823905216; 0.2627048604; 0.5566498808; 0.3616531369; 0.8102956845; 0.311038248; 0.9957727987];
                  [-0.4045066237; 0.2265974397; -0.364370571; -0.5151009499; -0.1813159271; 1.680433018; 0.5349142055; 1.328521725];
                  [-0.1697081198; -1.877691948; -1.075688624; -0.453068438; 0.4611519706; -0.9518645775; 0.6887330412; -0.5578073781];
                  [0.423388081; -0.7581575283; -0.5325179736; 0.4689329381; 0.3484691732; -0.393985965; 0.7151331408; -0.4924056638];
                  [0.4624644182; 0.5772525603; -0.361263826; -0.409821887; 0.8325621104; -0.8880179745; 0.6353527649; 1.243966731]] |> Matrix
let rri3 = 1
let rrf3 = 0.669844421404341
let rrj3 = 3
let rrAv3 = array2D [[-0.2320226957; -1.398676045; 0.09564358431; 1.837292738; 0.6849630728; 0.5831990152; -1.297230139; 1.226614878];
                  [1.97678083; 0.2590682296; 0.7935446491; 1.58247891; -1.036005185; 1.833505202; 0.1646814532; 1.631831];
                  [1.107249296; 0.0002823905216; 0.2627048604; 0.5566498808; 0.3616531369; 0.8102956845; 0.311038248; 0.9957727987];
                  [-0.4045066237; 0.2265974397; -0.364370571; -0.5151009499; -0.1813159271; 1.680433018; 0.5349142055; 1.328521725];
                  [-0.1697081198; -1.877691948; -1.075688624; -0.453068438; 0.4611519706; -0.9518645775; 0.6887330412; -0.5578073781];
                  [0.423388081; -0.7581575283; -0.5325179736; 0.4689329381; 0.3484691732; -0.393985965; 0.7151331408; -0.4924056638];
                  [0.4624644182; 0.5772525603; -0.361263826; -0.409821887; 0.8325621104; -0.8880179745; 0.6353527649; 1.243966731]] |> Matrix
let rr3 = TestRowReplacement rrA3 rri3 rrf3 rrj3 rrAv3
rrList <- rrList @ [rr3]

resultsList <- resultsList @ [rrList]

// data for 'rowInterchange()'

let mutable riList = []

// random dimensions (m = 7, n = 4)
let riA1 = array2D [[0.2067441035; 0.6955348985; -0.1462230251; -0.3159027941];
                  [1.700710634; -0.193931709; 0.4083798405; 1.252727018];
                  [-0.7408036323; -1.142209975; 1.113433369; -0.2764527701];
                  [-1.46549571; 0.2500857544; -0.4556684664; -1.962367072];
                  [-0.3188516662; -0.7186954046; -0.3160606689; -1.244027086];
                  [-0.06554626413; 1.871015395; 0.7364627044; 0.3985278849];
                  [-0.5459473219; -1.686731799; -0.09208124509; 1.593260769]] |> Matrix
let rii1 = 5
let rij1 = 5
let riAv1 = array2D [[0.2067441035; 0.6955348985; -0.1462230251; -0.3159027941];
                  [1.700710634; -0.193931709; 0.4083798405; 1.252727018];
                  [-0.7408036323; -1.142209975; 1.113433369; -0.2764527701];
                  [-1.46549571; 0.2500857544; -0.4556684664; -1.962367072];
                  [-0.3188516662; -0.7186954046; -0.3160606689; -1.244027086];
                  [-0.06554626413; 1.871015395; 0.7364627044; 0.3985278849];
                  [-0.5459473219; -1.686731799; -0.09208124509; 1.593260769]] |> Matrix
let ri1 = TestRowInterchange riA1 rii1 rij1 riAv1
riList <- riList @ [ri1]

// random dimensions (m = 5, n = 8)
let riA2 = array2D [[-2.262024055; 1.049710755; -0.2621744755; 1.199453394; -1.0097286; 0.9764632201; -0.1920627014; -1.381584616];
                  [0.9744798467; 0.3932817761; -0.4416862129; 0.1925026571; -2.318848788; 0.4892304288; -0.60350897; 0.4819377855];
                  [0.7892675676; 2.052782016; -0.3318317651; 0.1906655503; -0.6597070561; 1.005905523; -1.573947439; 1.134553846];
                  [-0.7329564521; 0.1856135922; -0.1863993871; -0.5889003609; -1.073678557; 0.9733904838; -0.4177444944; -0.3487593656];
                  [-0.8000197304; 0.7243958488; -0.1737677353; -0.1988410378; 1.366890804; 0.4683772486; 0.7700640854; -0.8624452878]] |> Matrix
let rii2 = 2
let rij2 = 2
let riAv2 = array2D [[-2.262024055; 1.049710755; -0.2621744755; 1.199453394; -1.0097286; 0.9764632201; -0.1920627014; -1.381584616];
                  [0.9744798467; 0.3932817761; -0.4416862129; 0.1925026571; -2.318848788; 0.4892304288; -0.60350897; 0.4819377855];
                  [0.7892675676; 2.052782016; -0.3318317651; 0.1906655503; -0.6597070561; 1.005905523; -1.573947439; 1.134553846];
                  [-0.7329564521; 0.1856135922; -0.1863993871; -0.5889003609; -1.073678557; 0.9733904838; -0.4177444944; -0.3487593656];
                  [-0.8000197304; 0.7243958488; -0.1737677353; -0.1988410378; 1.366890804; 0.4683772486; 0.7700640854; -0.8624452878]] |> Matrix
let ri2 = TestRowInterchange riA2 rii2 rij2 riAv2
riList <- riList @ [ri2]

// random dimensions (m = 3, n = 3)
let riA3 = array2D [[-0.4993103519; 0.4467479258; -1.634310689];
                  [-0.1273188984; -0.3771963613; -1.084310891];
                  [0.2028318485; -0.700394277; -0.9287636994]] |> Matrix
let rii3 = 0
let rij3 = 1
let riAv3 = array2D [[-0.1273188984; -0.3771963613; -1.084310891];
                  [-0.4993103519; 0.4467479258; -1.634310689];
                  [0.2028318485; -0.700394277; -0.9287636994]] |> Matrix
let ri3 = TestRowInterchange riA3 rii3 rij3 riAv3
riList <- riList @ [ri3]

resultsList <- resultsList @ [riList]

// data for 'rowScaling()'

let mutable rsList = []

// random dimensions (m = 6, n = 3)
let rsA1 = array2D [[-1.517900145; -0.9910058559; 0.6187102169];
                  [-0.3930653575; -2.12503849; -0.8450389717];
                  [-0.6521017795; 0.6413807373; 1.551055445];
                  [0.1549537125; 1.180613654; 0.05246851353];
                  [0.4489321141; 1.199731081; 1.065458906];
                  [-0.4162740054; 1.726513881; 0.2171080142]] |> Matrix
let rsi1 = 1
let rsf1 = 0.517207752688419
let rsAv1 = array2D [[-1.517900145; -0.9910058559; 0.6187102169];
                  [-0.2032964502; -1.099086382; -0.4370607075];
                  [-0.6521017795; 0.6413807373; 1.551055445];
                  [0.1549537125; 1.180613654; 0.05246851353];
                  [0.4489321141; 1.199731081; 1.065458906];
                  [-0.4162740054; 1.726513881; 0.2171080142]] |> Matrix
let rs1 = TestRowScaling rsA1 rsi1 rsf1 rsAv1
rsList <- rsList @ [rs1]

// random dimensions (m = 2, n = 8)
let rsA2 = array2D [[-0.3998025265; 0.4027963753; 0.9672409576; -0.5568089068; 1.677477881; 0.2190404025; -2.018102839; -0.2180625344];
                  [-0.2543234763; 0.6942345746; 0.7682363454; -0.5525208124; 0.8835172216; 0.3910032744; 0.481264463; -0.3133472851]] |> Matrix
let rsi2 = 0
let rsf2 = 0.812919997057375
let rsAv2 = array2D [[-0.3250074686; 0.3274412282; 0.7862895164; -0.4526410949; 1.363655314; 0.1780623234; -1.640556154; -0.1772673948];
                  [-0.2543234763; 0.6942345746; 0.7682363454; -0.5525208124; 0.8835172216; 0.3910032744; 0.481264463; -0.3133472851]] |> Matrix
let rs2 = TestRowScaling rsA2 rsi2 rsf2 rsAv2
rsList <- rsList @ [rs2]

// random dimensions (m = 6, n = 9)
let rsA3 = array2D [[-0.4639600992; 1.813258032; 0.8570883719; -2.607875752; 1.206367088; -0.2844983374; 0.3026324465; -0.5998369053; 1.598997258];
                  [1.028940193; -0.9992698923; -1.497477533; 1.157747217; 1.370721314; 0.7460634479; -0.6632460246; 0.2965234508; 0.3259679255];
                  [0.4400280446; 0.06514058418; 1.147763464; 0.2553951412; -2.259452446; 0.2482573608; 0.3590973437; -0.8978329483; 0.02051231578];
                  [2.156488061; 2.63888766; 0.9688755498; 1.855967766; -0.1680409993; 1.46553479; -0.06097058636; 0.2482305263; -1.998764302];
                  [0.8831627486; -0.7624130997; 0.6280064968; -0.7157086383; -0.2854691379; 0.6291246703; -0.06207986629; -0.5470354308; 1.062516032];
                  [-1.494351823; 2.581247385; 0.1845063938; 0.7215163335; -1.384406551; -2.37679613; -0.1337833429; 0.8997674056; -1.194222849]] |> Matrix
let rsi3 = 0
let rsf3 = 0.400943459663979
let rsAv3 = array2D [[-0.1860217673; 0.7270139488; 0.3436439771; -1.045610726; 0.4836849939; -0.1140677476; 0.1213385001; -0.2405006841; 0.6411074927];
                  [1.028940193; -0.9992698923; -1.497477533; 1.157747217; 1.370721314; 0.7460634479; -0.6632460246; 0.2965234508; 0.3259679255];
                  [0.4400280446; 0.06514058418; 1.147763464; 0.2553951412; -2.259452446; 0.2482573608; 0.3590973437; -0.8978329483; 0.02051231578];
                  [2.156488061; 2.63888766; 0.9688755498; 1.855967766; -0.1680409993; 1.46553479; -0.06097058636; 0.2482305263; -1.998764302];
                  [0.8831627486; -0.7624130997; 0.6280064968; -0.7157086383; -0.2854691379; 0.6291246703; -0.06207986629; -0.5470354308; 1.062516032];
                  [-1.494351823; 2.581247385; 0.1845063938; 0.7215163335; -1.384406551; -2.37679613; -0.1337833429; 0.8997674056; -1.194222849]] |> Matrix
let rs3 = TestRowScaling rsA3 rsi3 rsf3 rsAv3
rsList <- rsList @ [rs3]

resultsList <- resultsList @ [rsList]

// data for 'forwardReduction()'

let mutable frList = []

// random dimensions (m = 7, n = 8)
let frA1 = array2D [[-0.9177026775; 1.111439922; -0.2319143408; -0.8103861921; 0.2778662421; 1.611922254; -1.787855686; -0.6341398288];
                  [0.8203418985; -0.595298967; 1.406831442; -0.02175818672; 0.5105046634; -1.006000026; -0.146293722; -1.772042675];
                  [-1.753975405; -0.5911165937; 0.9660549408; -0.7326643453; -0.3705917665; -0.07565847761; 1.098523492; -0.7914063791];
                  [0.3322206967; 0.3181898995; 0.5058964982; 0.776770507; -1.140934266; -0.3593054272; -1.000207809; 1.538293577];
                  [-0.3409264477; 1.587483027; -0.6897611399; -0.6239338194; -0.2814824632; -1.205841196; -1.037126712; 0.09784047345];
                  [-0.4367092059; -1.19352287; -0.9095168443; -2.029896513; -1.675362152; -0.4180285155; 1.817692666; -1.212339163];
                  [-0.0499735959; 0.4376452742; 1.458664232; 1.638692703; -1.283415889; 0.1182653967; 0.1850909036; 0.651715384]] |> Matrix
let frAv1 = array2D [[-0.9177026775; 1.111439922; -0.2319143408; -0.8103861921; 0.2778662421; 1.611922254; -1.787855686; -0.6341398288];
                  [0.0; 0.3982262328; 1.199521324; -0.7461690049; 0.7588915606; 0.4349104063; -1.744472483; -2.338905433];
                  [0.0; 0.0; 9.588452767; -4.271684268; 4.272967277; -0.1909600553; -7.379398771; -15.52763418];
                  [0.0; 0.0; 0.0; 1.054565494; -1.63429472; -0.5975116114; 0.1633556304; 2.709242415];
                  [0.0; 0.0; 0.0; 0.0; -0.7264891795; -3.151316361; 1.579898557; 0.4406688611];
                  [0.0; -2.220446049e-16; 0.0; 0.0; 0.0; 20.82224003; -11.92194017; 0.5396657753];
                  [0.0; -7.043171448e-17; 0.0; 0.0; 0.0; 0.0; 1.86227178; -1.834664377]] |> Matrix
let fr1 = TestForwardReduction frA1 frAv1
frList <- frList @ [fr1]

// random dimensions (m = 6, n = 6)
let frA2 = array2D [[1.356792516; -0.3893167456; 1.134952745; -1.60009892; 0.7943630871; -0.02805055459];
                  [-0.03537114257; -0.2456308827; -0.2849442234; -1.057339716; 0.7725483989; -0.2824397958];
                  [-1.878942496; -0.3307662759; 0.2822490107; 0.2642212863; 0.5988434618; -0.2374894575];
                  [0.7917991263; -0.305715393; -0.06536846808; -1.207703843; 0.5432898372; 0.9081034512];
                  [-1.329041396; 0.9442705512; 0.4658968197; 1.013368916; -0.3276460171; 0.5629980234];
                  [0.8854226022; -1.522932224; -0.6416203575; 1.091304028; -2.989664301; 1.015115455]] |> Matrix
let frAv2 = array2D [[1.356792516; -0.3893167456; 1.134952745; -1.60009892; 0.7943630871; -0.02805055459];
                  [0.0; -0.2557802445; -0.255356372; -1.099053778; 0.7932571879; -0.2831710647];
                  [0.0; 0.0; 2.722445247; 1.786218289; -0.9989561539; 0.6867293484];
                  [0.0; 0.0; 0.0; 0.4894861837; -0.4020501492; 1.175187642];
                  [0.0; 0.0; 0.0; 0.0; -0.4201691565; 8.39323607];
                  [0.0; 0.0; 0.0; 0.0; 0.0; -39.72414207]] |> Matrix
let fr2 = TestForwardReduction frA2 frAv2
frList <- frList @ [fr2]

// random dimensions (m = 3, n = 3)
let frA3 = array2D [[-1.240575734; -1.450434991; -0.2527143025];
                  [0.859218022; 1.781094826; 1.059032171];
                  [0.9856276355; -2.055079155; -0.0007683974071]] |> Matrix
let frAv3 = array2D [[-1.240575734; -1.450434991; -0.2527143025];
                  [0.0; 0.7765290835; 0.8840032088];
                  [-1.110223025e-16; 0.0; 3.449810187]] |> Matrix
let fr3 = TestForwardReduction frA3 frAv3
frList <- frList @ [fr3]

// edge case data for 'forwardReduction()'

// dimensions (m = 3, n = 3)
let ecFrA0 = array2D [[0.0; 2.0; 2.0];
                  [1.0; 0.0; 0.0];
                  [0.0; 4.0; 4.0]] |> Matrix
let ecFrAv0 = array2D [[1.0; 0.0; 0.0];
                  [0.0; 2.0; 2.0];
                  [0.0; 0.0; 0.0]] |> Matrix
let ecFr0 = TestForwardReduction ecFrA0 ecFrAv0
frList <- frList @ [ecFr0]

// dimensions (m = 3, n = 3)
let ecFrA1 = array2D [[5.0; 5.0; 0.0];
                  [1.0; 1.0; 0.0];
                  [0.0; 1.0; 0.0]] |> Matrix
let ecFrAv1 = array2D [[5.0; 5.0; 0.0];
                  [0.0; 1.0; 0.0];
                  [0.0; 0.0; 0.0]] |> Matrix
let ecFr1 = TestForwardReduction ecFrA1 ecFrAv1
frList <- frList @ [ecFr1]

// dimensions (m = 4, n = 5)
let ecFrA2 = array2D [[0.0; 0.0; 0.0; 0.0; 1.0];
                  [0.0; 0.0; 4.0; 0.0; 1.0];
                  [0.0; 0.0; 1.0; 0.0; 0.0];
                  [0.0; 1.0; 0.0; 0.0; 0.0]] |> Matrix
let ecFrAv2 = array2D [[0.0; 1.0; 0.0; 0.0; 0.0];
                  [0.0; 0.0; 4.0; 0.0; 1.0];
                  [0.0; 0.0; 0.0; 0.0; -0.25];
                  [0.0; 0.0; 0.0; 0.0; 0.0]] |> Matrix
let ecFr2 = TestForwardReduction ecFrA2 ecFrAv2
frList <- frList @ [ecFr2]

// dimensions (m = 3, n = 3)
let ecFrA3 = array2D [[1.0; 0.0; 0.0];
                  [2.0; 1.0; 0.0];
                  [3.0; 2.0; 1.0]] |> Matrix
let ecFrAv3 = array2D [[1.0; 0.0; 0.0];
                  [0.0; 1.0; 0.0];
                  [0.0; 0.0; 1.0]] |> Matrix
let ecFr3 = TestForwardReduction ecFrA3 ecFrAv3
frList <- frList @ [ecFr3]

// dimensions (m = 3, n = 3)
let ecFrA4 = array2D [[1.0; 0.0; 0.0];
                  [2.0; 1.0; 0.0];
                  [3.0; 2.0; 0.0]] |> Matrix
let ecFrAv4 = array2D [[1.0; 0.0; 0.0];
                  [0.0; 1.0; 0.0];
                  [0.0; 0.0; 0.0]] |> Matrix
let ecFr4 = TestForwardReduction ecFrA4 ecFrAv4
frList <- frList @ [ecFr4]

resultsList <- resultsList @ [frList]

// data for 'backwardReduction()'

let mutable brList = []

// random dimensions (m = 9, n = 2)
let brA1 = array2D [[-0.5218041437; 0.7852739535];
                  [0.0; -1.010421012];
                  [-1.110223025e-16; 0.0];
                  [0.0; 0.0];
                  [0.0; 0.0];
                  [0.0; 0.0];
                  [0.0; 0.0];
                  [0.0; 0.0];
                  [0.0; 0.0]] |> Matrix
let brAv1 = array2D [[1.0; 0.0];
                  [0.0; 1.0];
                  [-1.110223025e-16; 0.0];
                  [0.0; 0.0];
                  [0.0; 0.0];
                  [0.0; 0.0];
                  [0.0; 0.0];
                  [0.0; 0.0];
                  [0.0; 0.0]] |> Matrix
let br1 = TestBackwardReduction brA1 brAv1
brList <- brList @ [br1]

// random dimensions (m = 9, n = 6)
let brA2 = array2D [[0.1166065516; 1.532356582; -2.335342704; 0.5525553771; -1.157552234; 0.5109257022];
                  [0.0; -23.94578836; 35.48407484; -10.64492027; 17.78313921; -6.074680434];
                  [0.0; 2.220446049e-16; 1.870336486; 3.035470154; 0.393953677; 0.6517106593];
                  [0.0; -9.061465552e-16; 0.0; -0.3392816301; -1.228250159; 0.802435681];
                  [0.0; 1.194541856e-14; 0.0; 0.0; 17.28902543; -11.23539342];
                  [0.0; 1.61719621e-17; 0.0; 0.0; 0.0; -1.753571726];
                  [0.0; 1.043995617e-15; -5.551115123e-17; 0.0; 0.0; 2.220446049e-16];
                  [0.0; 1.288786011e-15; 0.0; 0.0; 0.0; 0.0];
                  [0.0; 2.284964574e-16; 0.0; 0.0; 0.0; 0.0]] |> Matrix
let brAv2 = array2D [[1.0; 0.0; 0.0; 0.0; 0.0; 5.014540119e-16];
                  [0.0; 1.0; 0.0; 0.0; 0.0; -4.662138369e-17];
                  [0.0; -2.97285901e-16; 1.0; 0.0; 0.0; 8.416218575e-18];
                  [0.0; 1.694130186e-16; 0.0; 1.0; 0.0; 4.472381955e-17];
                  [0.0; 6.849317482e-16; 0.0; 0.0; 1.0; -1.027447641e-16];
                  [0.0; -9.222298613e-18; 0.0; 0.0; 0.0; 1.0];
                  [0.0; 1.043995617e-15; -5.551115123e-17; 0.0; 0.0; 2.220446049e-16];
                  [0.0; 1.288786011e-15; 0.0; 0.0; 0.0; 0.0];
                  [0.0; 2.284964574e-16; 0.0; 0.0; 0.0; 0.0]] |> Matrix
let br2 = TestBackwardReduction brA2 brAv2
brList <- brList @ [br2]

// random dimensions (m = 2, n = 8)
let brA3 = array2D [[-0.01687024387; 1.518847206; -0.8947784237; -1.771058101; -1.057917362; 0.953787717; 0.5045271667; -0.5478012502];
                  [0.0; 41.69932129; -23.15991437; -48.92410738; -30.29065668; 26.1845511; 14.27682998; -16.1723961]] |> Matrix
let brAv3 = array2D [[1.0; 0.0; 3.035322484; -0.6486673082; -2.690125387; -0.002797778143; 0.9181284383; -2.445647159];
                  [0.0; 1.0; -0.5554026698; -1.173259081; -0.7264064677; 0.6279371053; 0.3423755961; -0.3878335569]] |> Matrix
let br3 = TestBackwardReduction brA3 brAv3
brList <- brList @ [br3]

// edge case data for 'backwardReduction()'

// dimensions (m = 3, n = 3)
let ecBrA0 = array2D [[1.0; 0.0; 0.0];
                  [0.0; 2.0; 2.0];
                  [0.0; 0.0; 0.0]] |> Matrix
let ecBrAv0 = array2D [[1.0; 0.0; 0.0];
                  [0.0; 1.0; 1.0];
                  [0.0; 0.0; 0.0]] |> Matrix
let ecBr0 = TestBackwardReduction ecBrA0 ecBrAv0
brList <- brList @ [ecBr0]

// dimensions (m = 3, n = 3)
let ecBrA1 = array2D [[5.0; 5.0; 0.0];
                  [0.0; 1.0; 0.0];
                  [0.0; 0.0; 0.0]] |> Matrix
let ecBrAv1 = array2D [[1.0; 0.0; 0.0];
                  [0.0; 1.0; 0.0];
                  [0.0; 0.0; 0.0]] |> Matrix
let ecBr1 = TestBackwardReduction ecBrA1 ecBrAv1
brList <- brList @ [ecBr1]

// dimensions (m = 4, n = 5)
let ecBrA2 = array2D [[0.0; 1.0; 0.0; 0.0; 0.0];
                  [0.0; 0.0; 4.0; 0.0; 1.0];
                  [0.0; 0.0; 0.0; 0.0; -0.25];
                  [0.0; 0.0; 0.0; 0.0; 0.0]] |> Matrix
let ecBrAv2 = array2D [[0.0; 1.0; 0.0; 0.0; 0.0];
                  [0.0; 0.0; 1.0; 0.0; 0.0];
                  [0.0; 0.0; 0.0; 0.0; 1.0];
                  [0.0; 0.0; 0.0; 0.0; 0.0]] |> Matrix
let ecBr2 = TestBackwardReduction ecBrA2 ecBrAv2
brList <- brList @ [ecBr2]

resultsList <- resultsList @ [brList]

// data for 'gaussElimination()'

let mutable gelList = []

// random dimensions (m = 9, n = 9)
let gelA1 = array2D [[1.864385989; 1.221653202; 0.3925054379; 0.3557851626; 0.6409052022; -1.435569957; -0.5320513574; 0.3282993899; 0.007262735915];
                  [2.320063773; 0.7509153376; -1.000440422; 0.9270992734; -0.4150640988; -0.2402309721; 1.440344781; 0.3606750268; 1.700236276];
                  [-1.395585286; 0.05124042896; 0.05019829622; -2.273942447; -0.6746453752; 1.037141218; 0.1998673074; -0.6272784831; 1.525016406];
                  [-0.3889822546; 0.4672163254; 0.3511215173; -0.8622144052; -0.2468670452; 0.5674895242; -0.1640825846; 0.2173641915; 0.01273784535];
                  [-0.7532517482; -2.673066066; 1.086105294; -0.1654283634; 0.5494466679; 0.8896870681; 0.964506018; 1.38069963; -0.2048686108];
                  [0.9192977413; 0.1448998219; 1.086060657; 0.8584239936; 0.1811010337; 1.345888885; 0.4901794177; 1.293046481; -1.470343329];
                  [1.51833384; 0.7250426723; -0.1898331187; -0.5266208791; 1.542598738; 1.07239408; -1.648742396; -0.8867453982; -0.5490242609];
                  [-1.378022616; -0.5896956868; -1.119794193; -0.3402980198; -1.272833845; -0.6544471857; -0.1778000759; 0.6468339261; -0.641594775];
                  [-0.7380852182; -0.271859679; -0.5253785515; 0.5928862783; 0.3419155291; 1.041231294; -0.8148313934; 0.7372512995; 0.4087132657]] |> Matrix
let gelv1 = [|-0.04345166057; -0.9553769641; -0.2380934984; 0.8268674472; 0.1225714813; -1.74394003; -0.3676734137; -1.147844251; -1.149530575|] |> Vector
let gelAv1 = [|-10.4131285; 11.52964756; -11.35691724; -5.49350126; 22.95718992; -3.243152218; 17.39508463; 4.951004634; -5.772118564|] |> Vector
let gel1 = TestGaussElimination gelA1 gelv1 gelAv1
gelList <- gelList @ [gel1]

// random dimensions (m = 5, n = 5)
let gelA2 = array2D [[-0.007776862623; -0.2764538012; 0.1752994785; -0.4415956534; -0.311810281];
                  [-1.889956478; 0.9954580176; -0.04460397238; -0.07429450654; 1.231741339];
                  [-0.2958197337; 0.05673302981; -0.1289869893; 0.4690882929; 1.284887695];
                  [0.6552534359; -1.264375828; 0.4129415369; 2.048138169; -0.03273305429];
                  [-0.6955406535; 0.9659278239; 0.1606686739; -0.8159704603; -0.9830384885]] |> Matrix
let gelv2 = [|0.572701877; -1.365574568; -0.8433104011; 1.466031999; 1.03379954|] |> Vector
let gelAv2 = [|1.396492103; 1.294810167; 5.571337993; -0.05196765615; 0.1862797436|] |> Vector
let gel2 = TestGaussElimination gelA2 gelv2 gelAv2
gelList <- gelList @ [gel2]

// random dimensions (m = 7, n = 7)
let gelA3 = array2D [[-1.816424172; -1.631129597; -0.1362732202; -0.469279095; 1.999371897; 1.811240267; 1.67106061];
                  [-0.3751068357; -1.016477701; -1.765363426; 0.1024612411; 0.3888029249; 0.2745398599; 1.232536951];
                  [-0.4910142573; -0.406972292; 0.2141862501; 0.59547734; -1.717828841; -0.8400814686; -1.488519909];
                  [0.5240747901; 0.6849364706; -2.507759517; -1.30568664; -0.8668989614; -0.2546718746; -0.4759515414];
                  [1.559864898; -1.496443404; -1.347633863; -0.1914844885; -0.928374976; 0.837036421; -0.8249987977];
                  [2.285742816; 0.3543401965; 0.08948700148; 1.477241446; -0.9810339396; -0.7542332528; 0.4905487211];
                  [1.070157187; 0.8416890214; 0.3321332242; 0.1948410241; 0.6337848683; -1.187780206; 1.006419175]] |> Matrix
let gelv3 = [|-0.09222371166; -0.1578166902; -0.4756454291; 0.618869779; 0.09088830459; -0.7633377013; 0.0191104387|] |> Vector
let gelAv3 = [|0.08752803947; 0.199647107; -0.3576948215; 0.07542199443; 0.8168315459; -0.04349235787; -0.7033320877|] |> Vector
let gel3 = TestGaussElimination gelA3 gelv3 gelAv3
gelList <- gelList @ [gel3]

resultsList <- resultsList @ [gelList]

let printSummaries llst =
    printfn "\nSummary\n=============================="
    let printSummary lst =
        let pass = List.filter (fun (x,y,z) -> y) lst
        match lst.Head with
        | x,y,z -> 
            let s = sprintf "Tests of %s passed/total:" x
            printfn "%-50s [%i/%i]" s (pass.Length) (lst.Length)
    List.map printSummary llst |> ignore
    printfn "------------------------------"

let printDetails llst =
    printfn "\nTest results\n=============================="
    let printDetail (lst : (string * bool * string) list) =
        List.map (fun (x,y,z) -> printf "%s" z) lst
    List.map printDetail llst |> ignore
    printfn ""

if details then printDetails resultsList
if summary then printSummaries resultsList
